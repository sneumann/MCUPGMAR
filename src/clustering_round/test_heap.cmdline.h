/* test_heap.cmdline.h */

/* File autogenerated by gengetopt version 2.19.1  */

#ifndef TEST_HEAP_CMDLINE_H
#define TEST_HEAP_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "test_heap"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  int rand_seed_arg;	/* random number generator seed.  */
  char * rand_seed_orig;	/* random number generator seed original value given at command line.  */
  const char *rand_seed_help; /* random number generator seed help description.  */
  int break_at_arg;	/* iteration at which to break and dump.  */
  char * break_at_orig;	/* iteration at which to break and dump original value given at command line.  */
  const char *break_at_help; /* iteration at which to break and dump help description.  */
  int init_num_numbers_arg;	/* size of initial population (default='1000').  */
  char * init_num_numbers_orig;	/* size of initial population original value given at command line.  */
  const char *init_num_numbers_help; /* size of initial population help description.  */
  int range_arg;	/* upper bound on the initial random numbers (default='100').  */
  char * range_orig;	/* upper bound on the initial random numbers original value given at command line.  */
  const char *range_help; /* upper bound on the initial random numbers help description.  */
  float reentry_arg;	/* chance of pushing a number after poping the smallest (default='0.5').  */
  char * reentry_orig;	/* chance of pushing a number after poping the smallest original value given at command line.  */
  const char *reentry_help; /* chance of pushing a number after poping the smallest help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int rand_seed_given ;	/* Whether rand-seed was given.  */
  int break_at_given ;	/* Whether break-at was given.  */
  int init_num_numbers_given ;	/* Whether init-num-numbers was given.  */
  int range_given ;	/* Whether range was given.  */
  int reentry_given ;	/* Whether reentry was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TEST_HEAP_CMDLINE_H */
